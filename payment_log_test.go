package paymentlog

import (
	"testing"
	"time"
)

var paymentLogs = map[*PaymentLog]error{
	&PaymentLog{
		Amount:      1,
		Source:      SourceBalanced,
		SourceID:    "id",
		Created:     time.Now(),
		Status:      StatusPending,
		Currency:    CurrencyUSD,
		ProjectID:   "id",
		UserID:      "id",
		AccountID:   "id",
		AccountType: "google",
	}: MissingID,
	&PaymentLog{
		ID:          "id",
		Source:      SourceBalanced,
		SourceID:    "id",
		Created:     time.Now(),
		Status:      StatusPending,
		Currency:    CurrencyUSD,
		ProjectID:   "id",
		UserID:      "id",
		AccountID:   "id",
		AccountType: "google",
	}: MissingAmount,
	&PaymentLog{
		ID:          "id",
		Amount:      1,
		SourceID:    "id",
		Created:     time.Now(),
		Status:      StatusPending,
		Currency:    CurrencyUSD,
		ProjectID:   "id",
		UserID:      "id",
		AccountID:   "id",
		AccountType: "google",
	}: MissingSource,
	&PaymentLog{
		ID:          "id",
		Amount:      1,
		Source:      SourceBalanced,
		Created:     time.Now(),
		Status:      StatusPending,
		Currency:    CurrencyUSD,
		ProjectID:   "id",
		UserID:      "id",
		AccountID:   "id",
		AccountType: "google",
	}: MissingSourceID,
	&PaymentLog{
		ID:          "id",
		Amount:      1,
		Source:      SourceBalanced,
		SourceID:    "id",
		Status:      StatusPending,
		Currency:    CurrencyUSD,
		ProjectID:   "id",
		UserID:      "id",
		AccountID:   "id",
		AccountType: "google",
	}: MissingCreated,
	&PaymentLog{
		ID:          "id",
		Amount:      1,
		Source:      SourceBalanced,
		SourceID:    "id",
		Created:     time.Now(),
		Currency:    CurrencyUSD,
		ProjectID:   "id",
		UserID:      "id",
		AccountID:   "id",
		AccountType: "google",
	}: MissingStatus,
	&PaymentLog{
		ID:          "id",
		Amount:      1,
		Source:      SourceBalanced,
		SourceID:    "id",
		Created:     time.Now(),
		Status:      StatusPending,
		ProjectID:   "id",
		UserID:      "id",
		AccountID:   "id",
		AccountType: "google",
	}: MissingCurrency,
	&PaymentLog{
		ID:          "id",
		Amount:      1,
		Source:      SourceBalanced,
		SourceID:    "id",
		Created:     time.Now(),
		Status:      StatusPending,
		Currency:    CurrencyUSD,
		UserID:      "id",
		AccountID:   "id",
		AccountType: "google",
	}: MissingProjectID,
	&PaymentLog{
		ID:          "id",
		Amount:      1,
		Source:      SourceBalanced,
		SourceID:    "id",
		Created:     time.Now(),
		Status:      StatusPending,
		Currency:    CurrencyUSD,
		ProjectID:   "id",
		AccountID:   "id",
		AccountType: "google",
	}: MissingUserID,
	&PaymentLog{
		ID:          "id",
		Amount:      1,
		Source:      SourceBalanced,
		SourceID:    "id",
		Created:     time.Now(),
		Status:      StatusPending,
		Currency:    CurrencyUSD,
		ProjectID:   "id",
		UserID:      "id",
		AccountType: "google",
	}: MissingAccountID,
	&PaymentLog{
		ID:        "id",
		Amount:    1,
		Source:    SourceBalanced,
		SourceID:  "id",
		Created:   time.Now(),
		Status:    StatusPending,
		Currency:  CurrencyUSD,
		ProjectID: "id",
		UserID:    "id",
		AccountID: "id",
	}: MissingAccountType,
	&PaymentLog{
		ID:          "id",
		Amount:      1,
		Source:      SourceBalanced,
		SourceID:    "id",
		Created:     time.Now(),
		Status:      StatusPending,
		Currency:    CurrencyUSD,
		ProjectID:   "id",
		UserID:      "id",
		AccountID:   "id",
		AccountType: "google",
	}: nil,
}

func TestPaymentLogValidation(t *testing.T) {
	var result error
	for paymentLog, expectation := range paymentLogs {
		result = paymentLog.Validate()
		if result != expectation {
			t.Errorf("Error validating payment log. Expected %s, got %s.", expectation, result)
		}
	}
}
